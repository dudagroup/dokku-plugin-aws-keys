#!/usr/bin/env bash
# ROOT AWS KEYS

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

GROUPNAME=dokku-users

# REMOVE FOR LIVE
DOKKU_ROOT=$HOME

_path='.aws_keys'

APP=$2
OLDHOME=$HOME
HOME="$DOKKU_ROOT/$_path"
APP_KEY_FILE=$HOME/aws_keys_$APP
mkdir -p $HOME

awscmd() {
  docker run -it --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION centurylink/aws-cli-wetty aws $*
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "Error: Please specify an <app name>"
    exit 1
  fi
  [[ ! -d "$DOKKU_ROOT/$APP" ]] && echo "Error: App $APP does not exist!" && exit 1
  echo
}

check_already_exists() {
  if [[ -f "$APP_KEY_FILE" ]]; then
    echo "Info: App $APP already has AWS Keys stored in file $APP_KEY_FILE!"
    exit 1
  fi
  echo
}

ensure_exists() {
  if [[ ! -f "$APP_KEY_FILE" ]]; then
    echo "Error: There are no stored credentials for App: $APP. Create them with dokku aws_keys:create $APP"
    exit 1
  fi
  echo
}

load_root_keys() {
  if ! source $HOME/root_keys; then
    echo "Error: Please Configure AWS Root keys with: dokku aws_keys:configure <aws_id> <aws_secret>"
    exit 1
  fi
  echo "Using stored root keys"
}

ensure_aws_group_exists() {
  echo "Info: Esnure the existence of group $GROUPNAME ..."
  if ! output=$(awscmd iam get-group --group-name ${GROUPNAME}) ; then
    echo "Info: $GROUPNAME doesnt exist. Creating it now...."
    if output=$(awscmd iam create-group --group-name ${GROUPNAME}); then
      echo "Created group $GROUPNAME"
    else
      echo "Damn, I fail. Crap."
      exit 1
    fi
  else
    echo "Group $GROUPNAME exists!"
  fi
}


ensure_aws_user_exists() {
  if ! output=$(awscmd iam create-user --user-name ${USERNAME}); then
    echo "User: $USERNAME already exist!"
  else
    echo "User: $USERNAME created!"
  fi
}

ensure_aws_user_membership_in_group() {
  if ! ouput=$(awscmd iam add-user-to-group --user-name ${USERNAME} --group-name ${GROUPNAME}); then
    echo "Membership: User $USERNAME is alread in Group $GROUPNAME!"
  else
    echo "Membership: User $USERNAME added to Group $GROUPNAME!"
  fi
}

case "$1" in
  aws_keys:env)
    check_app
    ensure_exists
    AWS_ACCESS_KEY_ID=$(perl -ne 'print "$1" if /"AccessKeyId": "(.*)"/' ${APP_KEY_FILE})
    AWS_SECRET_ACCESS_KEY=$(perl -ne 'print "$1" if /"SecretAccessKey": "(.*)"/' ${APP_KEY_FILE})
    echo "-e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
    ;;

  aws_keys:rm)
    check_app
    load_root_keys
    ensure_exists
    RM_AWS_ACCESS_KEY_ID=$(perl -ne 'print "$1" if /"AccessKeyId": "(.*)"/' ${APP_KEY_FILE})
#    AWS_SECRET_ACCESS_KEY=$(perl -ne 'print "$1" if /"SecretAccessKey": "(.*)"/' ${APP_KEY_FILE})
    USERNAME=$(perl -ne 'print "$1" if /"UserName": "(.*)"/' ${APP_KEY_FILE})
    if ! awscmd iam delete-access-key --user-name ${USERNAME} --access-key-id ${RM_AWS_ACCESS_KEY_ID}; then
      echo "AWS Key $AWS_ACCESS_KEY_ID couldn't be deleted."
      echo "Quitting."
      exit 1
    else
      rm ${APP_KEY_FILE}
      echo "AWS Key $AWS_ACCESS_KEY_ID successfully deleted."
    fi
    ;;


  aws_keys:configure)
    if [ -z "$2" ] || [ -z "$3" ] ; then
      echo "Seriously! PLEASE specify the keys, man!!!"
    fi
    echo "export AWS_ACCESS_KEY_ID=$2" > $HOME/root_keys
    echo "export AWS_SECRET_ACCESS_KEY=$3" >> $HOME/root_keys
    echo "export AWS_DEFAULT_REGION=us-west-1" >> $HOME/root_keys
    ;;

  aws_keys:create)

    check_app
    check_already_exists
    load_root_keys
    ensure_aws_group_exists
    USERNAME="dokku-$APP"
    ensure_aws_user_exists
    ensure_aws_user_membership_in_group
    if ! awscmd iam create-access-key --user-name ${USERNAME} > ${APP_KEY_FILE};then
      rm ${APP_KEY_FILE}
      echo "Failed to create the keys"
      exit 1
    else
      echo "Successfully created the keys!!!!!"
    fi

    echo "Assigning AWS Keys"

    ;;

  help)
    cat && cat<<EOF
    aws_keys:configure  <AWS_ACCESS_KEY_ID> <AWS_SECRET_ACCESS_KEY> Configure Root AWS Key and Secret
    aws_keys:env        <app>                                       Env AWS Keys to App
    aws_keys:create     <app>                                       Create AWS Keys to App
    aws_keys:rm         <app>                                       Remove AWS Keys to App
EOF
    ;;

  *)
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;

esac
